def print_board(board):
    """Print the current state of the board"""
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def check_winner(board, player):
    """Check if the current player has won"""
    # Check rows
    for row in board:
        if all(cell == player for cell in row):
            return True
    
    # Check columns
    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True
    
    # Check diagonals
    if all(board[i][i] == player for i in range(3)):
        return True
    if all(board[i][2-i] == player for i in range(3)):
        return True
    
    return False

def is_board_full(board):
    """Check if the board is full (tie game)"""
    return all(cell != " " for row in board for cell in row)

def is_valid_move(board, row, col):
    """Check if the move is valid"""
    if row < 0 or row > 2 or col < 0 or col > 2:
        return False
    return board[row][col] == " "

def play_game():
    # Initialize empty board
    board = [[" " for _ in range(3)] for _ in range(3)]
    players = ["X", "O"]
    current_player = 0
    
    print("Welcome to Tic Tac Toe!")
    print("Enter positions as row,column (0-2,0-2)")
    
    while True:
        # Print current board
        print_board(board)
        
        # Get player move
        player = players[current_player]
        while True:
            try:
                move = input(f"Player {player}'s turn (row,col): ")
                row, col = map(int, move.split(","))
                
                if is_valid_move(board, row, col):
                    board[row][col] = player
                    break
                else:
                    print("Invalid move! Try again.")
            except (ValueError, IndexError):
                print("Invalid input! Use format: row,col (e.g., 1,1)")
        
        # Check for winner
        if check_winner(board, player):
            print_board(board)
            print(f"Player {player} wins!")
            break
        
        # Check for tie
        if is_board_full(board):
            print_board(board)
            print("It's a tie!")
            break
        
        # Switch players
        current_player = (current_player + 1) % 2

if __name__ == "__main__":
    play_game()
